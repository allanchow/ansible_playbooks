#jinja2: lstrip_blocks: "True", trim_blocks: "True"
# {{ ansible_managed }}

filter {
  if [type] == "udp_monitor"             { drop {} }
  if [type] == "netflow" {
    if [netflow][sampling_interval] > 0 {
      ruby {
        code => '
          st = event.get("[netflow][sampling_interval]").to_f
          event.set("[netflow][bps]", (event.get("[netflow][in_bytes]").to_f * st * 8.0 / 60.0).round(5))
          event.set("[netflow][pps]", (event.get("[netflow][in_pkts]").to_f * st / 60.0).round(5))
        '
      }
    }
    mutate {
      add_field => { "[hostname]" => "%{[host]}" }
    }
    dns {
      reverse => [ "[hostname]" ]
      action => "replace"
      max_retries => 2
      hit_cache_ttl => 60
      hit_cache_size => 5000
      failed_cache_ttl => 30
      failed_cache_size => 1000
    }
    if "%{[hostname]}" == "%{[host]}" {
      mutate {
        remove_field => [ "hostname" ]
      }
    }
    # CDN
    translate {
      field => "[netflow][ipv4_src_addr]"
      destination => "[netflow][ipv4_src_host]"
      dictionary_path => "{{ logstash.conf_root }}/cdn_ip.yml"
      exact => true
    }
    translate {
      field => "[netflow][ipv4_dst_addr]"
      destination => "[netflow][ipv4_dst_host]"
      dictionary_path => "{{ logstash.conf_root }}/cdn_ip.yml"
      exact => true
    }
    if [netflow][ipv4_src_host] =~ /(?i)^(uat-)?cdn-g.*$/ {
      mutate {
        add_tag => [ "cdn_inflow" ]
      }
    }
    if [netflow][ipv4_dst_host] =~ /(?i)^(uat-)?cdn-g.*$/ {
      mutate {
        add_tag => [ "cdn_outflow" ]
      }
    }
    cidr {
      add_tag => [ "allbrightnet" ]
      address => [ "%{[netflow][ipv4_src_addr]}", "%{[netflow][ipv4_dst_addr]}" ]
      network => [
        {{ ipv4.hk_eqx01 | map('wrap') | join(', ') }}
      ]
    }
    # Multicast
    if [netflow][ipv4_src_addr] =~ /^2[2-3][4-9]\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/ {
      mutate {
        add_tag => [ "outflow_multicast" ]
      }
    }
    if [netflow][ipv4_dst_addr] =~ /^2[2-3][4-9]\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/ {
      mutate {
        add_tag => [ "inflow_multicast" ]
      }
    }
    # Broadcast
    cidr {
      add_tag => [ "outflow_broadcast" ]
      address => [ "%{[netflow][ipv4_src_addr]}" ]
      network => [ "255.255.255.255" ]
    }
    cidr {
      add_tag => [ "inflow_broadcast" ]
      address => [ "%{[netflow][ipv4_dst_addr]}" ]
      network => [ "255.255.255.255" ]
    }
    if [netflow][ipv4_src_addr] =~ /\.255$/ {
      mutate {
        add_tag => [ "outflow_broadcast_domain"]
      }
    }
    if [netflow][ipv4_dst_addr] =~ /\.255$/ {
      mutate {
        add_tag => [ "inflow_broadcast_domain"]
      }
    }
    cidr {
      add_tag => [ "private_src_ip" ]
      address => [ "%{[netflow][ipv4_src_addr]}" ]
      network => [ "0.0.0.0/8", "10.0.0.0/8", "127.0.0.0/8", "169.254.0.0/16", "172.16.0.0/12", "192.168.0.0/16" ]
    }
    if "private_src_ip" not in [tags] and "outflow_broadcast" not in [tags] and "outflow_broadcast_domain" not in [tags] and "outflow_multicast" not in [tags] {
      geoip {
        source => "[netflow][ipv4_src_addr]"
        target => "src_geoip"
        database => "{{ logstash.conf_root }}/{{ db_geo }}"
        remove_tag => [ "private_src_ip" ]
      }
    }
    cidr {
      add_tag => [ "private_dst_ip" ]
      address => [ "%{[netflow][ipv4_dst_addr]}" ]
      network => [ "0.0.0.0/8", "10.0.0.0/8", "127.0.0.0/8", "169.254.0.0/16", "172.16.0.0/12", "192.168.0.0/16" ]
    }
    if "private_dst_ip" not in [tags] and "inflow_broadcast" not in [tags] and "inflow_broadcast_domain" not in [tags] and "inflow_multicast" not in [tags] {
      geoip {
        source => "[netflow][ipv4_dst_addr]"
        target => "dst_geoip"
        database => "{{ logstash.conf_root }}/{{ db_geo }}"
        remove_tag => [ "private_dst_ip" ]
      }
    }
    translate {
      field => "[netflow][protocol]"
      destination => "[netflow][protocol_name]"
      dictionary_path => "{{ logstash.nodes_root }}/{{ logstash_nodename }}/conf.d/netflow/proto.yml"
      exact => true
      fallback => "no match"
    }
    translate {
      field => "[netflow][tcp_flags]"
      destination => "[netflow][tcp_flags_name]"
      dictionary_path => "{{ logstash.nodes_root }}/{{ logstash_nodename }}/conf.d/netflow/tcp_flags.yml"
      exact => true
      fallback => "no match"
    }
    translate {
      field => "[netflow][l4_src_port]"
      destination => "[netflow][l4_src_port_name]"
      dictionary_path => "{{ logstash.nodes_root }}/{{ logstash_nodename }}/conf.d/netflow/src_dst_port.yml"
      exact => true
      fallback => "no match"
    }
    translate {
      field => "[netflow][l4_dst_port]"
      destination => "[netflow][l4_dst_port_name]"
      dictionary_path => "{{ logstash.nodes_root }}/{{ logstash_nodename }}/conf.d/netflow/src_dst_port.yml"
      exact => true
      fallback => "no match"
    }
  }
}
