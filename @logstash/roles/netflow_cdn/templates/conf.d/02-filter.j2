#jinja2: lstrip_blocks: "True", trim_blocks: "True"
# {{ ansible_managed }}

filter {
  if [type] == "udp_monitor"             { drop {} }
  if [type] == "netflow" {
#    if [netflow][sampling_interval] > 0 {
      ruby {
        code => '
#          st = event.get("[netflow][sampling_interval]").to_f
          st = 1
          event.set("[netflow][bps]", (event.get("[netflow][in_bytes]").to_f * st * 8.0 / 60.0).round(5))
          event.set("[netflow][pps]", (event.get("[netflow][in_pkts]").to_f * st / 60.0).round(5))
        '
      }
#   }
    mutate {
      add_field => {
        "[cdnhost]" => "%{[host]}"
#        "[netflow][ipv4_src_host]" => "%{[netflow][ipv4_src_addr]}"
#        "[netflow][ipv4_dst_host]" => "%{[netflow][ipv4_dst_addr]}"
      }
    }
    dns {
      reverse => [ "[cdnhost]" ]
      action => "replace"
      max_retries => 2
      hit_cache_ttl => 60
      hit_cache_size => 5000
      failed_cache_ttl => 30
      failed_cache_size => 1000
    }
    if "%{[cdnhost]}" == "%{[host]}" {
      mutate {
        remove_field => [ "cdnhost" ]
      }
    }
    cidr {
      add_tag => [ "allbrightnet" ]
      address => [ "%{[netflow][ipv4_src_addr]}", "%{[netflow][ipv4_dst_addr]}" ]
      network => [
        {{ ipv4.hk_eqx01 | map('wrap') | join(', ') }}
      ]
    }
#    if "allbrightnet" not in [tags] {
#      dns {
#        reverse => [ "[netflow][ipv4_src_host]", "[netflow][ipv4_dst_host]" ]
#        action => "replace"
#        max_retries => 2
#        hit_cache_ttl => 60
#        hit_cache_size => 5000
#        failed_cache_ttl => 30
#        failed_cache_size => 1000
#      }
#    }
    cidr {
      add_tag => [ "cdn_landattack" ]
      address => [ "%{[netflow][ipv4_src_addr]}" ]
      network => [ "%{[netflow][ipv4_dst_addr]}" ]
    }
    if "cdn_landattack" not in [tags] {
      cidr {
        add_tag => [ "cdn_landattack" ]
        address => [ "%{[netflow][ipv4_dst_addr]}" ]
        network => [ "%{[netflow][ipv4_src_addr]}" ]
      }
    }
    if "cdn_landattack" not in [tags] {
      # CDN
      translate {
        field => "[netflow][ipv4_src_addr]"
        destination => "[netflow][ipv4_src_host]"
        dictionary_path => "{{ logstash.conf_root }}/cdn_ip_netflow.yml"
        exact => true
      }
      translate {
        field => "[netflow][ipv4_dst_addr]"
        destination => "[netflow][ipv4_dst_host]"
        dictionary_path => "{{ logstash.conf_root }}/cdn_ip_netflow.yml"
        exact => true
      }
      # cidr {
      #   add_tag => [ "cdn_outflow" ]
      #   address => [ "%{[netflow][ipv4_src_addr]}" ]
      #   network => [ "%{[host]}" ]
      # }
      # private src ip may be resolved to our CDN
      if [netflow][ipv4_src_host] =~ /(?i)^(uat-)?cdn-.*$/ {
        mutate {
          add_tag => [ "cdn_outflow" ]
        }
      }
      # cidr {
      #   add_tag => [ "cdn_inflow" ]
      #   address => [ "%{[netflow][ipv4_dst_addr]}" ]
      #   network => [ "%{[host]}" ]
      # }
      # private dst ip may be resolved to our CDN
      if [netflow][ipv4_dst_host] =~ /(?i)^(uat-)?cdn-.*$/ {
        mutate {
          add_tag => [ "cdn_inflow" ]
        }
      }
      # Multicast
      if [netflow][ipv4_src_addr] =~ /^2[2-3][4-9]\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/ {
        mutate {
          add_tag => [ "cdn_outflow_multicast" ]
        }
      }
      if [netflow][ipv4_dst_addr] =~ /^2[2-3][4-9]\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/ {
        mutate {
          add_tag => [ "cdn_inflow_multicast" ]
        }
      }
      # Broadcast
      cidr {
        add_tag => [ "cdn_outflow_broadcast" ]
        address => [ "%{[netflow][ipv4_src_addr]}" ]
        network => [ "255.255.255.255" ]
      }
      cidr {
        add_tag => [ "cdn_inflow_broadcast" ]
        address => [ "%{[netflow][ipv4_dst_addr]}" ]
        network => [ "255.255.255.255" ]
      }
    }
    # src IP Spoofing
    cidr {
      add_tag => [ "private_src_ip" ]
      address => [ "%{[netflow][ipv4_src_addr]}" ]
      network => [ "0.0.0.0/8", "10.0.0.0/8", "127.0.0.0/8", "169.254.0.0/16", "172.16.0.0/12", "192.168.0.0/16" ]
    }
    if "private_src_ip" in [tags] and "cdn_outflow" not in [tags] {
      mutate {
        add_tag => [ "cdn_spoof_src_addr" ]
      }
    }
    if "cdn_spoof_src_addr" in [tags] and [netflow][ipv4_src_addr] =~ /\.255$/ {
      mutate {
        add_tag => [ "cdn_spoof_src_broadcast_domain" ]
      }
    }
    # src GEO
    if "private_src_ip" not in [tags] and "cdn_spoof_src_broadcast_domain" not in [tags] and "cdn_outflow_multicast" not in [tags] and "cdn_outflow_broadcast" not in [tags] {
      geoip {
        periodic_flush => true
        source => "[netflow][ipv4_src_addr]"
        target => "src_geoip"
        database => "{{ logstash.conf_root }}/{{ db_geo }}"
      }
    }
    mutate {
      remove_tag => [ "private_src_ip" ]
    }
    # dst IP Spoofing
    cidr {
      add_tag => [ "private_dst_ip" ]
      address => [ "%{[netflow][ipv4_dst_addr]}" ]
      network => [ "0.0.0.0/8", "10.0.0.0/8", "127.0.0.0/8", "169.254.0.0/16", "172.16.0.0/12", "192.168.0.0/16" ]
    }
    if "private_dst_ip" in [tags] and "cdn_inflow" not in [tags] {
      mutate {
        add_tag => [ "cdn_spoof_dst_addr" ]
      }
    }
    if "cdn_spoof_dst_addr" in [tags] and [netflow][ipv4_dst_addr] =~ /\.255$/ {
      mutate {
        add_tag => [ "cdn_spoof_dst_broadcast_domain" ]
      }
    }
    # dst GEO
    if "private_dst_ip" not in [tags] and "cdn_spoof_dst_broadcast_domain" not in [tags] and "cdn_inflow_multicast" not in [tags] and "cdn_inflow_broadcast" not in [tags] {
      geoip {
        periodic_flush => true
        source => "[netflow][ipv4_dst_addr]"
        target => "dst_geoip"
        database => "{{ logstash.conf_root }}/{{ db_geo }}"
      }
    }
    mutate {
      remove_tag => [ "private_dst_ip" ]
    }
    translate {
      field => "[netflow][protocol]"
      destination => "[netflow][protocol_name]"
      dictionary_path => "{{ logstash.nodes_root }}/{{ logstash_nodename }}/conf.d/netflow_cdn/proto.yml"
      exact => true
      fallback => "no match"
    }
    translate {
      field => "[netflow][tcp_flags]"
      destination => "[netflow][tcp_flags_name]"
      dictionary_path => "{{ logstash.nodes_root }}/{{ logstash_nodename }}/conf.d/netflow_cdn/tcp_flags.yml"
      exact => true
      fallback => "no match"
    }
    translate {
      field => "[netflow][l4_src_port]"
      destination => "[netflow][l4_src_port_name]"
      dictionary_path => "{{ logstash.nodes_root }}/{{ logstash_nodename }}/conf.d/netflow_cdn/src_dst_port.yml"
      exact => true
      fallback => "no match"
    }
    translate {
      field => "[netflow][l4_dst_port]"
      destination => "[netflow][l4_dst_port_name]"
      dictionary_path => "{{ logstash.nodes_root }}/{{ logstash_nodename }}/conf.d/netflow_cdn/src_dst_port.yml"
      exact => true
      fallback => "no match"
    }
  }
}
