#jinja2: lstrip_blocks: "True", trim_blocks: "True"
# {{ ansible_managed }}

filter {
  if [type] == "udp_monitor"             { drop {} }
  if [type] == "error_log" {
    # Force to encode message to utf-8 before json parsing
    ruby {
      code => "
        msg = event.get('message').dup
        msg.force_encoding(Encoding::UTF_8)
        # unless msg.force_encoding(Encoding::UTF_8).valid_encoding?
        #   enc = [Encoding::GB18030]
        #   enc.each { |enc|
        #     next unless msg.force_encoding(enc).valid_encoding?
        #     msg.encode!(Encoding::UTF_8)
        #     break
        #   }
        # end
        event.set('message', msg)
      "
    }
    grok {
      pattern_definitions => {
        "NGX_ERR_TIMESTAMP" => "%{YEAR}/%{MONTHNUM}/%{MONTHDAY} %{TIME}"
        "NGX_IPORWHOST" => "(?:%{IP}|(?:\*\.)?\.?%{HOSTNAME})"
      }
      match => {
        "message" => "(?m)<%{NONNEGINT:syslog_pri}>%{SPACE}%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:logsource} %{SYSLOGPROG}: %{NGX_ERR_TIMESTAMP:ngx_errlog_timestamp} \[%{LOGLEVEL:level}\] %{POSINT:ngx_pid}#%{POSINT:ngx_tid}: \*%{POSINT:ngx_cid} %{DATA:errmsg}, client: %{IP:client_ip}?, server: (?:%{NGX_IPORWHOST:vhost_name}(?::%{POSINT:vhost_port})?)?(?:, request: \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\")?(?:, subrequest: \"%{URIPATH:subrequest}\")?(?:, upstream: \"%{NOTSPACE:upstream}\")?(?:, host: \"%{IPORHOST:host}(?::%{POSINT:port})?\")?(?:, referrer: \"%{URI:referrer}\")?"
      }
      #overwrite => [ "message" ]
    }
    syslog_pri {
      syslog_pri_field_name => "syslog_pri"
      use_labels => true
    }
    if [program] !~ /(?i)^nginx/ { drop {} }
  }
  if [type] == "access_log" {
    # Force to encode message to utf-8 before json parsing
    ruby {
      code => "
        #msg = event.get('message').dup
        #msg.force_encoding(Encoding::UTF_8)
        # unless msg.force_encoding(Encoding::UTF_8).valid_encoding?
        #   enc = [Encoding::GB18030]
        #   enc.each { |enc|
        #     next unless msg.force_encoding(enc).valid_encoding?
        #     msg.encode!(Encoding::UTF_8)
        #     break
        #   }
        # end
        #unless msg.valid_encoding?
        #   msg = msg.chars.collect do |c|
        #     (c.valid_encoding?) ? c:'\\\\x'+c.unpack('H*').join.to_s
        #   end.join
        #   msg.force_encoding(Encoding::UTF_8)
        #end
        $key_dict = {
        	'a' => 'time_local',
        	'b' => 'time_iso8601',
        	'c' => 'request_at_ms',
        	'd' => 'request_time_ms',
        	'e' => 'resource_id',
        	'f' => 'https',
        	'g' => 'http2',
        	'h' => 'cdnhost',
        	'i' => 'server',
        		'i1' => 'program',
        	'j' => 'vhost',
        		'j1' => 'name',
        		'j2' => 'addr',
        		'j3' => 'port',
        	'k' => 'conn',
        		'k1' => 'id',
        		'k2' => 'requests',
        	'l' => 'tcpinfo',
        		'l1' => 'rtt',
        		'l2' => 'rttvar',
        		'l3' => 'snd_cwnd',
        		'l4' => 'rcv_space',
        	'm' => 'req',
        		'm1' => 'id',
        		'm2' => 'completion',
        		'm3' => 'length',
        		'm4' => 'pipe',
        		'm5' => 'host',
        		'm6' => 'client_ip',
        		'm7' => 'client_port',
        		'm8' => 'auth',
        		'm9' => 'scheme',
        		'm10' => 'protocol',
        		'm11' => 'verb',
        		'm12' => 'uri',
        		'm13' => 'raw_uri',
        		'm14' => 'file_ext',
        		'm15' => 'query_string',
        		'm16' => 'filename',
        		'm17' => 'content_length',
        		'm18' => 'content_type',
        		'm19' => 'range',
        		'm20' => 'pragma',
        		'm21' => 'cache_control',
        		'm22' => 'connection',
        		'm23' => 'accept',
        		'm24' => 'accept_encoding',
        		'm25' => 'referer',
        		'm26' => 'referer_invalid',
        		'm27' => 'cookie',
        		'm28' => 'ua',
        			'm28a' => 'raw_agent',
        	'n' => 'resp',
        		'n1' => 'status',
        		'n2' => 'gzip_ratio',
        		'n3' => 'bytes',
        		'n4' => 'bytes_kb',
        		'n5' => 'bytes_mb',
        		'n6' => 'body_bytes',
        		'n7' => 'content_length',
        		'n8' => 'content_type',
        		'n9' => 'content_encoding',
        		'n10' => 'pragma',
        		'n11' => 'cache_control',
        		'n12' => 'keepalive',
        		'n13' => 'connection',
        		'n14' => 'location',
        		'n15' => 'content_security_policy',
        		'n16' => 'p3p',
        		'n17' => 'via',
        		'n18' => 'transfer_encoding',
        		'n19' => 'cache_status',
        		'n20' => 'upstream_server',
        		'n21' => 'upstream',
        			'n21a' => 'addr',
        			'n21b' => 'port',
        			'n21c' => 'status',
        			'n21d' => 'body_bytes_length',
        			'n21e' => 'bytes_received',
        			'n21f' => 'response_time_ms',
        			'n21g' => 'header_time_ms',
        			'n21h' => 'connect_time_ms',
              'n21i' => 'priority',
            'n22' => 'upstream_trials',
        	'o' => 'ssl',
        		'o1' => 'sess_id',
        		'o2' => 'sess_reused',
        		'o3' => 'protocol',
        		'o4' => 'sni_server_name',
        		'o5' => 'cipher',
        		'o6' => 'ciphers_supported',
        		'o7' => 'client',
        			'o7a' => 'curves_supported',
        			'o7b' => 'verified',
        			'o7c' => 'cert_start_date',
        			'o7d' => 'cert_end_date',
        			'o7e' => 'cert_expired_left',
        			'o7f' => 'cert_serial',
        			'o7g' => 'cert_subject_dn',
        			'o7h' => 'cert_subject_dn_legacy',
        			'o7i' => 'cert_issuer_dn',
        			'o7j' => 'cert_issuer_dn_legacy',
        			'o7k' => 'cert_sha1',
        			'o7l' => 'cert_raw_pem',
        			'o7m' => 'cert_pem'
        }
        def map_value(thing)
          case thing
          when Hash
            deep_transform_key(thing)
          when Array
            return nil if thing.empty?
            thing.map { |v| map_value(v) }
          when String
            thing.force_encoding(Encoding::UTF_8).to_s
          else
            thing
          end
        end
        def deep_transform_key(hash)
          {}.tap do |h|
            hash.each do |key, value|
              next unless $key_dict.has_key?(key)
              val = map_value(value)
              h[$key_dict[key]] = val unless val.nil?
            end
          end
        end
        deep_transform_key(event.get('message')).each{ |k, v| event.set(k, v) }
      "
    }
    mutate {
      remove_field => [ "message" ]
    }
    if [server][program] !~ /(?i)^nginx/ { drop {} }
    ruby {
      code => "
        event.cancel if 5 * 24 * 3600 < (event.get('@timestamp')-::Time.now).abs
      "
    }
  #   date {
  #     match => [ "time_local", "dd/MMM/YYYY:HH:mm:ss Z", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
  #     locale => "en"
  # #     remove_field => [ "time_local" ]
  #   }
    # if [req][host] {
    #   tld {
    #     source => "[req][host]"
    #     target => "[req][host][tld]"
    #   }
    # }
    if [req][host] {
      tld {
        source => "[req][host]"
        target => "[req][tld]"
      }
    }
    if [req][ua][raw_agent] {
      useragent {
         source => "[req][ua][raw_agent]"
         target => "[req][ua]"
         regexes => "{{ logstash.conf_root }}/{{ db_ua }}"
      }
    }
    if [req][client_ip] {
      mutate {
        add_field => {
          #"[req][client_host]" => "%{[req][client_ip]}"
          "gw_ip" => "off1.allbrightnet.com"
        }
      }
      dns {
        resolve => [ "gw_ip" ]
        action => "replace"
        hit_cache_ttl => 60
        hit_cache_size => 100
        failed_cache_ttl => 30
        failed_cache_size => 100
      }
      cidr {
        add_tag => [ "allbrightnet" ]
        address => [ "%{[req][client_ip]}" ]
        network => [
          # CDN Self
          "%{host}",
          # Office Internet Gateway [Dynamic]
          "%{gw_ip}",
          # Office Internet Gateway [Static]
          "59.149.245.238/30",
          # Office Private IP
          "192.168.89.0/24",
          # IDC Equinix HK01 27.111.185.128/28, 27.111.174.58/30
          "27.111.174.57",
          "27.111.174.58",
          "27.111.185.128",
          "27.111.185.129",
          "27.111.185.130",
          "27.111.185.131",
          "27.111.185.132",
          "27.111.185.133",
          "27.111.185.134",
          "27.111.185.135",
          "27.111.185.136",
          "27.111.185.137",
          "27.111.185.138",
          "27.111.185.139",
          "27.111.185.140",
          "27.111.185.141",
          "27.111.185.142",
          "27.111.185.143"
        ]
      }
      translate {
        field => "[req][client_ip]"
        destination => "[req][client_host]"
        dictionary_path => "{{ logstash.conf_root }}/cdn_ip.yml"
        exact => true
        add_tag => [ "is_allbrightnet" ]
      }
      if "allbrightnet" not in [tags] and "is_allbrightnet" in [tags] and [req][client_host] =~ /(?i)^(uat-)?cdn-.*$/ {
        mutate {
          add_tag => [ "allbrightnet" ]
        }
      #   dns {
      #     reverse => [ "[req][client_host]" ]
      #     action => "replace"
      #     max_retries => 2
      #     hit_cache_ttl => 60
      #     hit_cache_size => 5000
      #     failed_cache_ttl => 30
      #     failed_cache_size => 1000
      #   }
      }
      mutate {
        remove_field => [ "gw_ip" ]
        remove_tag => [ "is_allbrightnet" ]
      }
    }
    cidr {
      add_tag => [ "private_ip" ]
      address => [ "%{[req][client_ip]}" ]
      network => [ "0.0.0.0/8", "10.0.0.0/8", "127.0.0.0/8", "169.254.0.0/16", "172.16.0.0/12", "192.168.0.0/16" ]
    }
    if "private_ip" not in [tags] and "allbrightnet" not in [tags] {
      geoip {
        periodic_flush => true
        source => "[req][client_ip]"
        target => "geoip"
        database => "{{ logstash.conf_root }}/{{ db_geo }}"
      }
      geoip {
        periodic_flush => true
        source => "[req][client_ip]"
        target => "[geoip][asn]"
        database => "{{ logstash.conf_root }}/{{ db_asn }}"
      }
    }
    clone {
      clones => [ "access_log_es" ]
    }
    if [type] == "access_log_es" and [resp][upstream] {
      split {
        field => "[resp][upstream]"
      }
    }
  }
}
