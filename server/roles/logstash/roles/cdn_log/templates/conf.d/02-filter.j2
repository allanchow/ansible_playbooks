#jinja2: lstrip_blocks: "True", trim_blocks: "True"
# {{ ansible_managed }}

filter {
  if [type] == "udp_monitor"             { drop {} }
  if [type] == "error_log" {
    # Force to encode message to utf-8 before json parsing
    ruby {
      code => "
        msg = event.get('message').dup
        msg.force_encoding(Encoding::UTF_8)
        # unless msg.force_encoding(Encoding::UTF_8).valid_encoding?
        #   enc = [Encoding::GB18030]
        #   enc.each { |enc|
        #     next unless msg.force_encoding(enc).valid_encoding?
        #     msg.encode!(Encoding::UTF_8)
        #     break
        #   }
        # end
        event.set('message', msg)
      "
    }
    grok {
      pattern_definitions => {
        "NGX_ERR_TIMESTAMP" => "%{YEAR}/%{MONTHNUM}/%{MONTHDAY} %{TIME}"
      }
      match => {
        "message" => "<%{NONNEGINT:syslog_pri}>%{SPACE}%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:logsource} %{SYSLOGPROG}: %{NGX_ERR_TIMESTAMP:ngx_errlog_timestamp} \[%{LOGLEVEL:level}\] %{POSINT:ngx_pid}#%{POSINT:ngx_tid}: \*%{POSINT:ngx_cid} %{GREEDYDATA:message}"
      }
      overwrite => [ "message" ]
    }
    syslog_pri {
      syslog_pri_field_name => "syslog_pri"
      use_labels => true
    }
    if [program] !~ /(?i)^nginx/ { drop {} }
  }
  if [type] == "access_log" {
    # Force to encode message to utf-8 before json parsing
    ruby {
      code => "
        msg = event.get('message').dup
        msg.force_encoding(Encoding::UTF_8)
        # unless msg.force_encoding(Encoding::UTF_8).valid_encoding?
        #   enc = [Encoding::GB18030]
        #   enc.each { |enc|
        #     next unless msg.force_encoding(enc).valid_encoding?
        #     msg.encode!(Encoding::UTF_8)
        #     break
        #   }
        # end
        #unless msg.valid_encoding?
        #   msg = msg.chars.collect do |c|
        #     (c.valid_encoding?) ? c:'\\\\x'+c.unpack('H*').join.to_s
        #   end.join
        #   msg.force_encoding(Encoding::UTF_8)
        #end
        event.set('message', msg)
      "
    }
    json {
      source => "message"
      remove_field => [ "message" ]
    }
    if [server][program] !~ /(?i)^nginx/ { drop {} }
    ruby {
      code => "
        event.cancel if 5 * 24 * 3600 < (event.get('@timestamp')-::Time.now).abs
      "
    }
  #   date {
  #     match => [ "time_local", "dd/MMM/YYYY:HH:mm:ss Z", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
  #     locale => "en"
  # #     remove_field => [ "time_local" ]
  #   }
    # if [req][host] {
    #   tld {
    #     source => "[req][host]"
    #     target => "[req][host][tld]"
    #   }
    # }
    if [req][ua][raw_agent] {
      useragent {
         source => "[req][ua][raw_agent]"
         target => "[req][ua]"
         regexes => "{{ logstash.conf_root }}/{{ db_ua }}"
      }
    }
    if [req][client_ip] {
      mutate {
        add_field => {
          "[req][client_host]" => "%{[req][client_ip]}"
          "gw_ip" => "off1.allbrightnet.com"
          "cdnhost_ip" => "%{cdnhost}"
        }
      }
      dns {
        resolve => [ "gw_ip", "cdnhost_ip" ]
        action => "replace"
        hit_cache_ttl => 60
        hit_cache_size => 100
        failed_cache_ttl => 30
        failed_cache_size => 100
      }
      cidr {
        add_tag => [ "allbrightnet" ]
        address => [ "%{[req][client_ip]}" ]
        network => [
          # CDN Self
          "%{cdnhost_ip}",
          # Office Internet Gateway [Dynamic]
          "%{gw_ip}",
          # Office Internet Gateway [Static]
          "59.149.245.238/30",
          # Office Private IP
          "192.168.89.0/24",
          # UDomain Assigned Static IP
          "202.181.166.240/29",
          # UDomain Private IP
          "10.1.0.0/24",
          # IDC Equinix HK01 27.111.185.128/28, 27.111.174.58/30
          "27.111.174.57",
          "27.111.174.58",
          "27.111.185.128",
          "27.111.185.129",
          "27.111.185.130",
          "27.111.185.131",
          "27.111.185.132",
          "27.111.185.133",
          "27.111.185.134",
          "27.111.185.135",
          "27.111.185.136",
          "27.111.185.137",
          "27.111.185.138",
          "27.111.185.139",
          "27.111.185.140",
          "27.111.185.141",
          "27.111.185.142",
          "27.111.185.143"
        ]
      }
      if "allbrightnet" not in [tags] {
        dns {
          reverse => [ "[req][client_host]" ]
          action => "replace"
          max_retries => 2
          hit_cache_ttl => 60
          hit_cache_size => 5000
          failed_cache_ttl => 30
          failed_cache_size => 1000
        }
      }
      if [req][client_host] =~ /(?i)\.allbright(net(work)?\.com|\.local)$/ {
        mutate {
          add_tag => [ "allbrightnet" ]
        }
      }
      mutate {
        remove_field => [ "gw_ip", "cdnhost_ip" ]
      }
    }
    cidr {
      add_tag => [ "private_ip" ]
      address => [ "%{[req][client_ip]}" ]
      network => [ "10.0.0.0/8", "127.0.0.0/8", "169.254.0.0/16", "172.16.0.0/12", "192.168.0.0/16" ]
    }
    if "private_ip" not in [tags] and "allbrightnet" not in [tags] {
      geoip {
        periodic_flush => true
        source => "[req][client_ip]"
        target => "geoip"
        database => "{{ logstash.conf_root }}/{{ db_geo }}"
      }
    }
    clone {
      clones => [ "access_log_es" ]
    }
    if [type] == "access_log_es" and [resp][upstream] {
      split {
        field => "[resp][upstream]"
      }
    }
  }
}
