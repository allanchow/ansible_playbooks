---
- include: "{{ item }}"
  with_items:
    - mod_tcp_bbr.yml
    - mod_rwmem.yml

# ref: https://javapipe.com/ddos/blog/iptables-ddos-protection/
- name: System tuning
  vars:
    total_mem: "{{ mempages|int *page_size|int /1024 }}"
    reserved_mem_min_MB: 8
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    sysctl_set: yes
    sysctl_file: "{{ sysctl_custom_conf }}"
    state: present
  with_items:
    - { name: kernel.printk, value: 4 4 1 7 }
    - { name: kernel.panic, value: 10 }
    - { name: kernel.sysrq, value: 0 }
    - { name: kernel.pid_max, value: 65535 }
    # - { name: kernel.maps_protect, value: 1 }
    # - { name: kernel.exec-shield, value: 1 }
    - { name: kernel.randomize_va_space, value: 2 }
    - { name: kernel.yama.ptrace_scope, value: 1 }
    # optimal value
    - { name: kernel.shmmax, value: "{{ (total_mem | float * ((ansible_architecture == 'x86_64') | ternary(0.5, 0.75))) | int }}" }
    - { name: kernel.shmall, value: "{{ page_size|int *1024 }}" }
    # appends pid to core filename
    - { name: kernel.core_uses_pid, value: 1 }
    # hide exposed kernel pointers
    - { name: kernel.kptr_restrict, value: 1 }
    # maximum message size, in bytes
    - { name: kernel.msgmnb, value: 65536 }
    # default maximum message queue size
    - { name: kernel.msgmax, value: 65536 }
    # Do less swappping
    - { name: vm.dirty_ratio, value: 80 }
    - { name: vm.swappiness, value: 20 }
    - { name: vm.dirty_background_ratio, value: 5 }
    - { name: vm.vfs_cache_pressure, value: 50 }
    - { name: vm.dirty_writeback_centisecs, value: 500 }
    - { name: vm.dirty_expire_centisecs, value: 3000 }
    # improve memory
    - { name: fs.file-max, value: "{{ (total_mem | float *(10/100)) | int }}"}
    - { name: vm.mmap_min_addr, value: 4096 }
    - { name: vm.min_free_kbytes, value: "{{ reserved_mem_min_MB *1024 }}" }
    - { name: vm.max_map_count, value: 262144 }
    # overcommit memory in percent rather than a specified value
    - { name: vm.overcommit_ratio, value: 50 }
    - { name: vm.overcommit_kbytes, value: 0 }
    # always allow overcommit memory
    - { name: vm.overcommit_memory, value: 1 }
    # general network security options
    #Prevent SYN attack, enable SYNcookies (they will kick-in when the max_syn_backlog reached)
    - { name: net.ipv4.tcp_syncookies, value: 1 }
    - { name: net.ipv4.tcp_syn_retries, value: 2 }
    - { name: net.ipv4.tcp_synack_retries, value: 2 }
    - { name: net.ipv4.tcp_max_syn_backlog, value: 4096 }
    # Disables packet forwarding
    - { name: net.ipv4.ip_forward, value: 0 }
    - { name: net.ipv4.conf.all.forwarding, value: 0 }
    - { name: net.ipv4.conf.default.forwarding, value: 0 }
    - { name: net.ipv6.conf.all.forwarding, value: 0 }
    - { name: net.ipv6.conf.default.forwarding, value: 0 }
    # Disables IP source routing
    - { name: net.ipv4.conf.all.send_redirects, value: 0 }
    - { name: net.ipv4.conf.default.send_redirects, value: 0 }
    - { name: net.ipv4.conf.all.accept_source_route, value: 0 }
    - { name: net.ipv4.conf.default.accept_source_route, value: 0 }
    - { name: net.ipv6.conf.all.accept_source_route, value: 0 }
    - { name: net.ipv6.conf.default.accept_source_route, value: 0 }
    # Enable IP spoofing protection, turn on source route verification
    - { name: net.ipv4.conf.all.rp_filter, value: 1 }
    - { name: net.ipv4.conf.default.rp_filter, value: 1 }
    # Disable ICMP Redirect Acceptance
    - { name: net.ipv4.conf.all.accept_redirects, value: 0 }
    - { name: net.ipv4.conf.default.accept_redirects, value: 0 }
    - { name: net.ipv4.conf.all.secure_redirects, value: 0 }
    - { name: net.ipv4.conf.default.secure_redirects, value: 0 }
    - { name: net.ipv6.conf.all.accept_redirects, value: 0 }
    - { name: net.ipv6.conf.default.accept_redirects, value: 0 }
    # Enable Log Spoofed Packets, Source Routed Packets, Redirect Packets
    - { name: net.ipv4.conf.all.log_martians, value: 1 }
    - { name: net.ipv4.conf.default.log_martians, value: 1 }
    # rfc1337 => 2 min MSL (tcp_fin_timeout*2)
    - { name: net.ipv4.tcp_rfc1337, value: 1 }
    - { name: net.ipv4.tcp_fin_timeout, value: 60 }
    # Decrease the time default value for connections to keep alive
    - { name: net.ipv4.tcp_keepalive_time, value: 300 }
    - { name: net.ipv4.tcp_keepalive_probes, value: 5 }
    - { name: net.ipv4.tcp_keepalive_intvl, value: 15 }
    # Don't relay bootp
    - { name: net.ipv4.conf.all.bootp_relay, value: 0 }
    # Don't proxy arp for anyone
    - { name: net.ipv4.conf.all.proxy_arp, value: 0 }
    # Turn on the tcp_timestamps, accurate timestamp make TCP congestion control algorithms work better
    - { name: net.ipv4.tcp_timestamps, value: 1 }
    # Don't ignore directed pings
    - { name: net.ipv4.icmp_echo_ignore_all, value: 0 }
    # Enable ignoring broadcasts request
    - { name: net.ipv4.icmp_echo_ignore_broadcasts, value: 1 }
    # Enable bad error message Protection
    - { name: net.ipv4.icmp_ignore_bogus_error_responses, value: 1 }
    # Allowed local port range
    - { name: net.ipv4.ip_local_port_range, value: 16384 65535 }
    # Enable a fix for RFC1337 - time-wait assassination hazards in TCP
    - { name: net.ipv4.tcp_rfc1337, value: 1 }
    # Do not auto-configure IPv6
    - { name: net.ipv6.conf.all.autoconf, value: 0 }
    - { name: net.ipv6.conf.all.accept_ra, value: 0 }
    - { name: net.ipv6.conf.default.autoconf, value: 0 }
    - { name: net.ipv6.conf.default.accept_ra, value: 0 }
    - { name: "{{ 'net.ipv6.conf.%s.autoconf' % iface }}", value: 0 }
    - { name: "{{ 'net.ipv6.conf.%s.accept_ra' % iface }}", value: 0 }
    # Turn on the tcp_window_scaling
    - { name: net.ipv4.tcp_window_scaling, value: 1 }
    # Turn on TCP selective ack for better throughput
    - { name: net.ipv4.tcp_sack, value: 1 }
    # Turn on TCP low latency mode
    - { name: net.ipv4.tcp_low_latency, value: 1 }
    # Increase number of incoming connections
    - { name: net.core.somaxconn, value: 65000 }
    # Increase number of incoming connections backlog
    - { name: net.core.netdev_max_backlog, value: 262144 }
    - { name: net.core.dev_weight, value: 64 }
    # Increase the maximum amount of option memory buffers
    - { name: net.core.optmem_max, value: 65535 }
    # Dos: Increase the tcp-time-wait buckets pool size to prevent simple DOS attacks
    - { name: net.ipv4.tcp_max_tw_buckets, value: 1440000 }
    # try to reuse time-wait connections, but don't recycle them (recycle can break clients behind NAT)
    - { name: net.ipv4.tcp_tw_recycle, value: 0 }
    - { name: net.ipv4.tcp_tw_reuse, value: 1 }
    # Dos: Limit number of orphans, each orphan can currently lives eats up 64Kb of unswappable memory
    - { name: net.ipv4.tcp_max_orphans, value: 16384 }
    # tells TCP/IP stack how many times to retry to kill connections on the other side before killing it on our own side. If your machine runs as a highly loaded http server it may be worth thinking about lowering this value
    - { name: net.ipv4.tcp_orphan_retries, value: 0 }
    # Increase the maximum memory used to reassemble IP fragments
    - { name: net.ipv4.ipfrag_high_thresh, value: 512000 }
    - { name: net.ipv4.ipfrag_low_thresh, value: 446464 }
    # don't cache ssthresh from previous connection
    - { name: net.ipv4.tcp_no_metrics_save, value: "{{ tcp_bbr.stdout | int == 1 | ternary(1,0) }}" }
    # Increase size of RPC datagram queue length
    - { name: net.unix.max_dgram_qlen, value: 50 }
    # Don't allow the arp table to become bigger than this
    - { name: net.ipv4.neigh.default.gc_thresh3, value: 2048 }
    # Tell the gc when to become aggressive with arp table cleaning.
    # Adjust this based on size of the LAN. 1024 is suitable for most /24 networks
    - { name: net.ipv4.neigh.default.gc_thresh2, value: 1024 }
    # Adjust where the gc will leave arp table alone - set to 32.
    - { name: net.ipv4.neigh.default.gc_thresh1, value: 32 }
    # Adjust to arp table gc to clean-up more often
    - { name: net.ipv4.neigh.default.gc_interval, value: 30 }
    # Increase TCP queue length
    - { name: net.ipv4.neigh.default.proxy_qlen, value: 96 }
    - { name: net.ipv4.neigh.default.unres_qlen, value: 6 }
    # Enable Explicit Congestion Notification (RFC 3168), disable it if it doesn't work for you
    - { name: net.ipv4.tcp_ecn, value: 1 }
    - { name: net.ipv4.tcp_reordering, value: 3 }
    # How many times to retry killing an alive TCP connection
    - { name: net.ipv4.tcp_retries2, value: 15 }
    - { name: net.ipv4.tcp_retries1, value: 3 }
    # Avoid falling back to slow start after a connection goes idle
    # keeps our cwnd large with the keep alive connections (kernel > 3.6)
    - { name: net.ipv4.tcp_slow_start_after_idle, value: 0 }
    # Allow the TCP fastopen flag to be used, beware some firewalls do not like TFO! (kernel > 3.7)
    - { name: net.ipv4.tcp_fastopen, value: 3 }
    # This will enusre that immediatly subsequent connections use the new values
    - { name: net.ipv4.route.flush, value: 1 }
    - { name: net.ipv6.route.flush, value: 1 }

- name: Reload sysctl
  shell: sysctl --system
  changed_when: False
