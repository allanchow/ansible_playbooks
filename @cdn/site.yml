#!/usr/bin/env ansible-playbook
- hosts: "{{ inv }}"
  #strategy: free
  become_method: sudo
  become: yes

  #pre_tasks:
#    - include: facts.yml

  roles:
    - { role: locales,        when: True, tags: [sys, cdn, locales] }
    - { role: ntp,            when: True, tags: [sys, cdn, ntp] }
    - { role: cron,           when: True, tags: [sys, cdn, cron] }
    - { role: dns,            when: True, tags: [cdn, dns] }
    - { role: apt,            when: True, tags: [sys, cdn, apt] }
    - { role: hostname,       when: True, tags: [sys, cdn, hostname] }
    - { role: syspkg,         when: True, tags: [sys, cdn, syspkg] }
    - { role: grub,           when: True, tags: [sys, cdn, grub] }
    - { role: sshd,           when: True, tags: [sys, cdn, sshd] }
    - { role: unload_drivers, when: True, tags: [sys, cdn] }
    - { role: rc.local,       when: True, tags: [sys, cdn, rc] }
    - { role: pamd,           when: True, tags: [sys, cdn] }
    - { role: services,       when: True, tags: [sys, cdn] }
    - { role: iptables,       when: True, tags: [cdn, firewall] }
    - { role: tuned_cpu,      when: True, tags: [sys, cdn, tuning] }
    - { role: tuned_network,  when: True, tags: [sys, cdn, tuning] }
    - { role: bash,           when: True, tags: [sys, cdn, bash] }
    - { role: softflowd,      when: True, tags: [cdn, softflowd],
        softflowd_dest_ip:    "{{ softflowd.ip }}",
        softflowd_dest_port:  "{{ softflowd.port }}"
      }
    - { role: memcached,      when: True, tags: [cdn, memcached],
        memcached_maxconn:    "{{ memcached.maxconn }}",
        memcached_maxslab:    "{{ memcached.max_slab_page }}",
        memcached_backlog:    "{{ memcached.backlog_queue_limit }}",
        memcached_tcp:        False,
        memcached_socket:     "{{ memcached.unix.socket }}",
        memcached_user:       "{{ memcached.user}}" }
    - { role: nginx,          when: True, tags: [cdn, nginx] }
    - { role: heartbeat,      when: True, tags: [cdn, heartbeat],
        heartbeat_every_sec:  30,
        heartbeat_log_ip:     "{{ heartbeat.outputs.direct.host | resolve }}",
        heartbeat_log_port:   "{{ heartbeat.outputs.direct.port }}",
        heartbeat_log_proxy:  "{{ heartbeat.outputs.proxy }}" }

  tasks:
    - name: speedtest
      get_url:
        url: https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py
        dest: ~/speedtest.py
      tags: [cdn]

    - name: iptables rules
      template:
        src: "{{ item }}"
        dest: "/etc/systemd/system/firewall.d/{{ item | basename | regex_replace('[.]j2$', '') }}"
        owner: root
        group: root
        mode: 0755
        force: yes
      with_fileglob:
        - templates/firewall.d/*.j2
      register: iptable_rules
      tags: [firewall]

    - name: restart iptables-rules
      systemd:
        name: iptables-rules
        state: restarted
      when: iptable_rules | changed
      tags: [firewall]


  # python3-chardet* python3-debian* python3-requests* ssh-import-id*
# pip install chardet
#pip install python3-debian
# pip install requests
# pip install ssh-import-id
  # tasks:
  #   - name: Insert new pam.d rules after pam_unix.so
  #     pamd:
  #       name: common-session
  #       path: /etc/pam.d/
  #       type: session
  #       control: required
  #       module_path: pam_unix.so
  #       new_type: "{{ item.type }}"
  #       new_control: "{{ item.control }}"
  #       new_module_path: "{{ item.module }}"
  #       state: after
  #     with_items:
  #       - { type: session, control: required, module: pam_limits.so }
  #       #- { type: session, control: optional, module: pam_systemd.so }
  #
  # - name: copy etc
  #   copy: src={{ deploy_file_path }}/files/etc dest=/ owner=root group=root
  #   tags:
  #    - copy_etc
  #
  # - name: copy nginx
  #   synchronize: src={{ deploy_file_path }}/files/local/nginx dest=/usr/local recursive=yes copy_links=yes delete=yes
  #   tags:
  #    - copy_nginx
  #
  # - name: copy script
  #   copy: src={{ deploy_file_path }}/files/local/script dest=/usr/local owner=root group=root directory_mode=755 mode=755
  #   tags:
  #    - copy_script
  #
  # - name: unzip nginx extra module
  #   unarchive: src={{ deploy_file_path }}/files/nginx_extra_module.tar.gz dest=/usr/local copy=yes
  #   tags:
  #    - uzip_nginx_extra_module
  #
  # - name: unzip memcached
  #   unarchive: src={{ deploy_file_path }}/files/memcached.tar.gz dest=/usr/local copy=yes
  #   tags:
  #    - uzip_memcached
  #
  # - name: copy nginx.conf template
  #   template: src={{ deploy_file_path }}/files/templates/nginx.conf.j2 dest=/usr/local/nginx/conf/nginx.conf owner=root group=root mode=0644
  #   tags:
  #    - copy_nginx_template
  #
  # - name: copy start memcache template
  #   template: src={{ deploy_file_path }}/files/templates/start_memcached.sh.j2 dest=/usr/local/script/start_memcached.sh owner=root group=root mode=0755
  #   tags:
  #    - copy_start_memcache_template

...
