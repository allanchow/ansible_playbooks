#jinja2: lstrip_blocks: "True", trim_blocks: "True"
-- {{ ansible_managed }}

local next  = next
local split = resty_ngx_re.split
local var = ngx.var
local upstream_addr = var.upstream_addr
local https = (var.https ~= nil and var.https ~= '') and true or false
local raw_uri = var.request_uri
local file_ext_regex = [[/[^\?#]*\.(?<ext>[^\?#/\.]+)(?:$|[\?#])]]
local m = ngx.re.match(raw_uri, file_ext_regex, "aisjo")
local file_ext = m and m['ext'] or ''

-- local server_log_json = {
--   program          = 'nginx',
--   version          = __to_s(var.nginx_version),
--   pid              = tonumber(var.pid),
--   hostname         = __to_s(var.hostname),
--   status = {
--     active         = tonumber(var.connections_active),
--     reading        = tonumber(var.connections_reading),
--     writing        = tonumber(var.connections_writing),
--     waiting        = tonumber(var.connections_waiting)
--   }
-- }
-- server_log(cjson.encode(server_log_json))

local log_json = {
  -- time_local
  a         = var.time_local,
  -- time_iso8601
  b       = var.time_iso8601,
  -- request_at_ms
  c      = math.floor(tonumber(var.msec) * 1000),
  -- request_time_ms
  d    = math.floor(tonumber(var.request_time) * 1000),
  -- resource_id
  e        = __to_n(var._resource_id),
  -- https
  f              = https,
  -- http2
  g              = __to_s(var.http2),
  -- cdnhost
  h            = '{{ inventory_hostname_short }}',
  -- server
  i = {
    -- program
    i1          = 'nginx'
  },
  -- vhost
  j = {
    -- name
    j1             = __to_s(var.server_name),
    -- addr
    j2             = var.server_addr,
    -- port
    j3             = tonumber(var.server_port)
  },
  -- conn
  k = {
    -- id
    k1               = tonumber(var.connection),
    -- requests
    k2         = tonumber(var.connection_requests)
  },
  -- tcpinfo
  l = {
    -- rtt
    l1              = tonumber(var.tcpinfo_rtt),
    -- rttvar
    l2           = tonumber(var.tcpinfo_rttvar),
    -- snd_cwnd
    l3         = tonumber(var.tcpinfo_snd_cwnd),
    -- rcv_space
    l4        = tonumber(var.tcpinfo_rcv_space)
  },
  -- req
  m = {
    -- id
    m1               = var.request_id,
    -- completion
    m2       = var.request_completion,
    -- length
    m3           = __to_n(var.request_length, 0),
    -- pipe
    m4             = var.pipe == 'p' and true or false,
    -- host
    m5             = __to_s(var.host),
    -- client_ip
    m6        = var.remote_addr,
    -- client_port
    m7      = __to_n(var.remote_port),
    -- auth
    m8             = __to_s(var.remote_user),
    -- scheme
    m9           = __to_s(var.scheme),
    -- protocol
    m10         = __to_s(var.server_protocol),
    -- verb
    m11             = __to_s(var.request_method),
    -- uri
    m12              = __to_s(var.uri),
    -- raw_uri
    m13          = __to_s(raw_uri),
    -- file_ext
    m14         = __to_s(file_ext),
    -- query_string
    m15     = __to_s(var.query_string),
    -- filename
    m16         = __to_s(var.request_filename),
    -- content_length
    m17   = __to_n(var.content_length),
    -- content_type
    m18     = __to_s(var.content_type),
    -- range
    m19            = __to_s(var.http_range),
    -- pragma
    m20           = __to_s(var.http_pragma),
    -- cache_control
    m21    = __to_s(var.http_cache_control),
    -- connection
    m22       = __to_s(var.http_connection),
    -- accept
    m23           = __to_s(var.http_accept),
    -- accept_encoding
    m24  = __to_s(var.http_accept_encoding),
    -- referer
    m25          = __to_s(var.http_referer),
    -- referer_invalid
    m26  = (var.invalid_referer ~= nil and var.invalid_referer ~= '') and true or false,
    -- cookie
    m27           = __to_s(var.http_cookie),
    -- ua
    m28               = {
      -- raw_agent
      m28a      = __to_s(var.http_user_agent)
    }
  },
  -- resp
  n = {
    -- status
    n1           = tonumber(var.status),
    -- gzip_ratio
    n2       = __to_n(var.gzip_ratio),
    -- bytes
    n3            = tonumber(var.bytes_sent) or 0,
    -- bytes_kb
    n4         = tonumber(string.format("%.4f", (var.bytes_sent or 0)/1024.0)) or 0,
    -- body_bytes
    n5         = tonumber(string.format("%.6f", (var.bytes_sent or 0)/1024.0/1024.0)) or 0,
    -- body_bytes
    n6       = __to_n(var.body_bytes_sent, 0),
    -- content_length
    n7   = __to_n(var.sent_http_content_length, 0),
    -- content_type
    n8     = __to_s(var.sent_http_content_type),
    -- content_encoding
    n9 = __to_s(var.sent_http_content_encoding),
    -- pragma
    n10           = __to_s(var.sent_http_pragma),
    -- cache_control
    n11    = __to_s(var.sent_http_cache_control),
    -- keepalive
    n12        = __to_s(var.sent_http_keep_alive),
    -- connection
    n13       = __to_s(var.sent_http_connection),
    -- location
    n14         = __to_s(var.sent_http_location),
    -- content_security_policy
    n15 = __to_s(var.sent_http_content_security_policy),
    -- p3p
    n16              = __to_s(var.sent_http_p3p),
    -- via
    n17              = __to_s(var.sent_http_via),
    -- transfer_encoding
    n18 = __to_s(var.sent_http_transfer_encoding),
    -- cache_status
    n19     = var.srcache_fetch_status .. '-' .. var.srcache_store_status
  }
}

local up = nil
if upstream_addr ~= nil then
  up = {}
  local sp = {}
  local uua, err  = split(upstream_addr, ",", nil, nil, nil)
  local count = #uua
  local uus, err  = split(var.upstream_status, ",", nil, nil, count)
  local uurl, err = split(var.upstream_response_length, ",", nil, nil, count)
  local uubr, err = split(var.upstream_bytes_received, ",", nil, nil, count)
  local uurt, err = split(var.upstream_response_time, ",", nil, nil, count)
  local uuht, err = split(var.upstream_header_time, ",", nil, nil, count)
  local uuct, err = split(var.upstream_connect_time, ",", nil, nil, count)

  local addr_port = { nil, 80 }
  for i, v in ipairs(uua) do
    split(trim(v), ":", nil, nil, 2, addr_port)
    _ip   = __to_ip(addr_port[1])
    if _ip == nil then break end
    _port = addr_port[2]
    _uurt = __to_n(uurt[i])
    _uuht = __to_n(uuht[i])
    _uuct = __to_n(uuct[i])
    table.insert(up,
      {
        -- addr
        n21a = _ip,
        -- port
        n21b = __to_n(_port, 80),
        -- status
        n21c = __to_n(uus[i]),
        -- body_bytes_length
        n21d = __to_n(uurl[i]),
        -- bytes_received
        n21e = __to_n(uubr[i]),
        -- response_time_ms
        n21f = _uurt ~= nil and math.floor(_uurt * 1000) or nil,
        -- header_time_ms
        n21g = _uuht ~= nil and math.floor(_uuht * 1000) or nil,
        -- connect_time_ms
        n21h = _uuct ~= nil and math.floor(_uuct * 1000) or nil,
        -- priority
        n21i = 0 - table.getn(up)

      }
    )
  end
  -- upstream_server
  log_json['n']['n20'] = __to_s(var.upstream_http_server)
  -- upstream
  log_json['n']['n21'] = up
  -- upstream_trials
  log_json['n']['n22'] = count
end

--  if next(up) ~= nil then
  --log_json['upstream'] = up
--  end
if https then
  -- ssl
  log_json['o'] = {
   -- sess_id
    o1          = var.ssl_session_id,
    -- sess_reused
    o2      = var.ssl_session_reused == 'r' and true or false,
    -- protocol
    o3         = var.ssl_protocol,
    -- sni_server_name
    o4  = var.ssl_server_name,
    -- cipher
    o5            = var.ssl_cipher,
    -- ciphers_supported
    o6 = var.ssl_ciphers,
    -- client
    o7 = {
      -- curves_supported
      o7a  = var.ssl_curves,
      -- client cert vertification
      -- verified
      o7b          = var.ssl_client_verify,
      -- client cert
      -- cert_start_date
      o7c   = var.ssl_client_v_start,
      -- cert_end_date
      o7d     = var.ssl_client_v_end,
      -- cert_expired_left
      o7e = var.ssl_client_v_remain,
      -- cert_serial
      o7f       = var.ssl_client_serial,
      -- cert_subject_dn
      o7g   = var.ssl_client_s_dn,
      -- cert_subject_dn_legacy
      o7h = var.ssl_client_s_dn_legacy,
      -- cert_issuer_dn
      o7i    = var.ssl_client_i_dn,
      -- cert_issuer_dn_legacy
      o7j = var.ssl_client_i_dn_legacy,
      -- cert_sha1
      o7k         = var.ssl_client_fingerprint,
      -- cert_raw_pem
      o7l      = var.ssl_client_raw_cert,
      -- cert_pem
      o7m          = var.ssl_client_cert,
    }
  }
end
es_log(es_access_logger, log_json)
